"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class drive_t(object):
    __slots__ = ["timestamp", "front_motor", "back_motor", "right_motor", "left_motor"]

    def __init__(self):
        self.timestamp = 0
        self.front_motor = 0.0
        self.back_motor = 0.0
        self.right_motor = 0.0
        self.left_motor = 0.0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(drive_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdddd", self.timestamp, self.front_motor, self.back_motor, self.right_motor, self.left_motor))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != drive_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return drive_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = drive_t()
        self.timestamp, self.front_motor, self.back_motor, self.right_motor, self.left_motor = struct.unpack(">qdddd", buf.read(40))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if drive_t in parents: return 0
        tmphash = (0x4f739894784fde1a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if drive_t._packed_fingerprint is None:
            drive_t._packed_fingerprint = struct.pack(">Q", drive_t._get_hash_recursive([]))
        return drive_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

